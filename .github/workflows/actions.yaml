name: Action Sample

# このActionsが動くのは、masterブランチにpushされたとき
on:
  push:
    branches: 
      - master
  # 手動でActionsを実行可能に
  workflow_dispatch:

# role-to-assumeを使ったAWSの認証をするのに必要らしい
permissions:
  id-token: write
  contents: read

# 変数定義
env:
  # ECRリポジトリ名
  ECR_REPOSITORY: sample-container

jobs:
  # Dockerイメージの作成とリポジトリへのアップロード
  build:
    runs-on: ubuntu-latest
    steps:
      # リポジトリの内容をこのジョブにclone
      - uses: actions/checkout@v2

      # dockerの設定を初期化
      - uses: docker/setup-buildx-action@v1

      # AWSへのログイン設定
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          # AWS上での操作として、ロールにIDプロバイダの設定が必須
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1200

      # dockerの操作対象をECRのリポジトリにする
      - uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REGISTRY }}

      # Dockerイメージの作成とリポジトリへのPush
      - uses: docker/build-push-action@v2
        with:
          context: ./nginx/Dockerfile
          push: true
          # タグにCommitのshaを設定する
          tags: ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

  # EKSにコンテナをデプロイしてロードバランサを設定
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1200

      - name: Configure EKS
        # eksの認証情報を更新する。このコマンドを呼べばkubeconfigの内容をSecretに設定することは不要。
        run: |
          aws eks update-kubeconfig --name test

      - name: Deploy to EKS
        # YAMLファイルで指定するimageをsedで無理やりsha付きのイメージ名に変更
        # もっといい方法もありそうだが、調べきれず
        run: |
          mkdir ./tmp
          sed -e 's/<IMAGE>/${{ secrets.ECR_REGISTRY }}:${{ github.sha }}/g' ./yaml/sample-container.yaml > ./tmp/sample-container.yaml
          kubectl apply -f ./tmp/sample-container.yaml
          kubectl apply -f ./yaml/service.yaml